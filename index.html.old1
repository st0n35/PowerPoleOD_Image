<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Multiple object detection using pre trained model in TensorFlow.js</title>
    <meta charset="utf-8">
    <!-- Import the webpage's stylesheet -->
    <link rel="stylesheet" href="style.css">
  </head>  
  <body>
    <h1>Multiple object detection using pre trained model in TensorFlow.js</h1>

    <p>Wait for the model to load before clicking the button to enable the webcam - at which point it will become visible to use.</p>
    
    <section id="demos" class="invisible">

      <p>Hold some objects up close to your webcam to get a real-time classification! When ready click "enable webcam" below and accept access to the webcam when the browser asks (check the top left of your window)</p>
      
      <div id="liveView" class="camView">
        <button id="webcamButton">Enable Webcam</button>
        <video id="webcam" autoplay width="640" height="480"></video>
      </div>
    </section>

    <!-- Import TensorFlow.js and automl library -->
    <script src="https://unpkg.com/@tensorflow/tfjs"></script>
    <script src="https://unpkg.com/@tensorflow/tfjs-automl"></script>
    
    <!-- Import the page's JavaScript to do some stuff -->
    <script>
    
    const video = document.getElementById('webcam');
    const liveView = document.getElementById('liveView');
    const demosSection = document.getElementById('demos');
    const enableWebcamButton = document.getElementById('webcamButton');

    // Check if webcam access is supported.
    function getUserMediaSupported() {
      return !!(navigator.mediaDevices &&
        navigator.mediaDevices.getUserMedia);
    }

    // If webcam supported, add event listener to button for when user
    // wants to activate it to call enableCam function which we will 
    // define in the next step.
    if (getUserMediaSupported()) {
      enableWebcamButton.addEventListener('click', enableCam);
    } else {
      console.warn('getUserMedia() is not supported by your browser');
    }

    // Enable the live webcam view and start classification.
    function enableCam(event) {
      // Only continue if the COCO-SSD has finished loading.
      if (!model_loaded) {
        return;
      }
  
      // Hide the button once clicked.
      event.target.classList.add('removed');  
  
      // getUsermedia parameters to force video but not audio.
      const constraints = {
        video: true
      };

      // Activate the webcam stream.
      navigator.mediaDevices.getUserMedia(constraints).then(function(stream) {
        video.srcObject = stream;
        video.addEventListener('loadeddata', predictWebcam(model));
      });
    }
     
var model_loaded = undefined;    

async function run() {
  const model = await tf.automl.loadObjectDetection('model.json');
  model_loaded = true;
  demosSection.classList.remove('invisible');
  return model;
}
 model = run();   
 
 //model.detect(video)     
      
var children = [];

async function predictWebcam(model) {
  document.body.append("predictWebcam")
  const video = document.getElementById('webcam');
  const predictions = await model.predict(video);
  document.body.append("Loaded Prediction")
  // Show the resulting object on the page.
  //const pre = document.createElement('pre');
  //pre.textContent = JSON.stringify(predictions, null, 2);
  //document.body.append(pre);
  /*// Now let's start classifying a frame in the stream.
  model.detect(video).then(function (predictions) {
    // Remove any highlighting we did previous frame.
    for (let i = 0; i < children.length; i++) {
      liveView.removeChild(children[i]);
    }
    children.splice(0);
    
    // Now lets loop through predictions and draw them to the live view if
    // they have a high confidence score.
    for (let n = 0; n < predictions.length; n++) {
      // If we are over 66% sure we are sure we classified it right, draw it!
      if (predictions[n].score > 0.66) {
        const p = document.createElement('p');
        p.innerText = predictions[n].class  + ' - with ' 
            + Math.round(parseFloat(predictions[n].score) * 100) 
            + '% confidence.';
        p.style = 'margin-left: ' + predictions[n].bbox[0] + 'px; margin-top: '
            + (predictions[n].bbox[1] - 10) + 'px; width: ' 
            + (predictions[n].bbox[2] - 10) + 'px; top: 0; left: 0;';

        const highlighter = document.createElement('div');
        highlighter.setAttribute('class', 'highlighter');
        highlighter.style = 'left: ' + predictions[n].bbox[0] + 'px; top: '
            + predictions[n].bbox[1] + 'px; width: ' 
            + predictions[n].bbox[2] + 'px; height: '
            + predictions[n].bbox[3] + 'px;';

        liveView.appendChild(highlighter);
        liveView.appendChild(p);
        children.push(highlighter);
        children.push(p);
      }
    }
    
    // Call this function again to keep predicting when the browser is ready.
    window.requestAnimationFrame(predictWebcam);
  });*/
}

      
    </script>
  </body>
</html>
